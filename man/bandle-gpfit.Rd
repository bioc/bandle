% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitGP.R, R/fitGPmaternPC.R
\name{fitGP}
\alias{fitGP}
\alias{fitGPmaternPC}
\alias{plotGPmatern}
\alias{fitGPmatern}
\title{fit a Gaussian process to spatial proteomics data}
\usage{
fitGP(object = object, fcol = "markers")

fitGPmaternPC(
  object = object,
  fcol = "markers",
  materncov = TRUE,
  nu = 2,
  hyppar = matrix(c(1, 50, 50), nrow = 1)
)

plotGPmatern(object = object, params = params, fcol = "markers")

fitGPmatern(object = object, fcol = "markers", materncov = TRUE, nu = 2)
}
\arguments{
\item{object}{A instance of class \code{MSnSet}}

\item{fcol}{feature column to indicate markers. Default is "markers".}

\item{materncov}{\code{logical} indicating whether matern covariance is used.}

\item{nu}{matern smoothness parameter. Default is 2.}

\item{hyppar}{The vector of penalised complexity hyperparameters, you must
provide a matrix with 3 columns and 1 row. The order is hyperparameters
on length-scale, amplitude, variance.}

\item{params}{The output of running \code{fitGPmatern} which is of class \code{gpParams}}
}
\value{
Returns an object of class \code{gpParams} which stores the posterior
predictive means, standard deviations, variances and also the MAP
hyperparamters for the GP.

The functions \code{plotGPmatern} plot the posterior
predictives overlayed with the markers for each subcellular class.
}
\description{
Helper function to fit GPs with squared exponential co-variances,
maximum marginal likelihood

Function to fit matern GPs to data with penalised complexity priors on the
hyperparameters, side effect will plot posterior predictives

Function to plot matern GPs

Function to fit matern GPs to data, side effect will plot posterior
predictives
}
\examples{
library(pRolocdata)
data("tan2009r1")
set.seed(1)
tansim <- sim_dynamic(object = tan2009r1, 
                    numRep = 6L,
                   numDyn = 100L)
gpParams <- lapply(tansim$lopitrep, function(x) fitGP(x))

library(pRolocdata)
data("tan2009r1")
set.seed(1)
tansim <- sim_dynamic(object = tan2009r1, 
                    numRep = 6L,
                   numDyn = 100L)
gpParams <- lapply(tansim$lopitrep, 
function(x) fitGPmaternPC(x, hyppar = matrix(c(0.5, 1, 100), nrow = 1)))

library(pRolocdata)
data("tan2009r1")
set.seed(1)
tansim <- sim_dynamic(object = tan2009r1, 
                    numRep = 6L,
                   numDyn = 100L)
gpParams <- lapply(tansim$lopitrep, function(x) fitGPmaternPC(x))

}
